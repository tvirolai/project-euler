/*
 * Project Euler (http://projecteuler.net) problem 12: Highly divisible 
 * triangular number
 * 
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
 * The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred 
 * divisors?
 */

package problems001_049;

import java.util.ArrayList;


public class Problem012 {
    
    public void solve() {
        int number = 500;
        while (true) {
            long triangle = triangleNumber(number);
            int divisors = getDivisorCount(triangle);
            if (divisors > 500) {
                System.out.println("Problem 12: " + triangle);
                break;
            }
            number++;
        }
    }
    
    public long triangleNumber(int count) {
        long result = 0;
        int round = 1;
        while (round <= count) {
            result += round;
            round++;
        }
        return result;
    }
    
    public int getDivisorCount(long x) {
        ArrayList<Long> smallFactors = new ArrayList<>();
        ArrayList<Long> factors = new ArrayList<>();
        for (int i = 1; i < Math.sqrt(x) + 1; i++) {
            if (x % i == 0) {
                smallFactors.add((long) i);
                factors.add((long) i);
            }
        }
        smallFactors.stream().forEach((z) -> {
            factors.add(x / z);
        });
             
        return factors.size();
    }

}
